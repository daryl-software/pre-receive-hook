#!/bin/bash
# 1/ ensure I'm up to date, but do not fail if not
# 2/ check tools presence



NULL_SHA1="0000000000000000000000000000000000000000" # 40 0's
UPTODATE_RUNNED=0
DEBUG=0
TMP_DIR=

TMPTOOLS=/tmp/check_tools

echo "RUN pre-receive hook (https://github.com/ezweb/pre-receive-hook)"


function error()
{
    echo ""
    echo -e "\033[31m ================================================================ \033[0m"
    echo -e "\033[31m =                          ERROR !!!                           = \033[0m"
    echo -e "\033[31m ================================================================ \033[0m"
    echo ""
    echo -e "\033[31m ERROR: $@ \033[0m"
    echo ""

    cleanup
    exit 3
}


function warn()
{
    echo ""
    echo -e "\033[1;31m\033[43m ================================================================ \033[0m"
    echo -e "\033[1;31m\033[43m =                        WARNING !!!                           = \033[0m"
    echo -e "\033[1;31m\033[43m ================================================================ \033[0m"
    echo ""
    echo -e "\033[1;31m\033[43m >>> $@ \033[0m"
    echo ""
}


function debug()
{
    if [ $DEBUG -gt 0 ]
    then
        echo "(debug: $@)"
    fi
}


# Run loop as soon as possible, to ensure this is this loop that will handle stdin
while read oldrev newrev ref
do
	# in a sub-shell ...
    # old revision is blank - branch creation
    if [ "$oldrev" = "$NULL_SHA1" ] ||
         # new revision is blank - branch deletion
         [ "$newrev" = "$NULL_SHA1" ] ;
    then
        # create new or delete old branch
        continue;
    fi

    base=$(git merge-base $oldrev $newrev);
    if [ "$base" != "$oldrev" ] ; then
        # non fast forward merge
        echo "ðŸ’¥ Force pushing of $ref is forbidden ðŸ¤¬";
        exit 5;
    fi
done

exit 0

